"""This module defines a parser for the logs generated by poker now."""

import logging
import re

from poker.model import actions
from poker.model import street
from poker.model import hand
from poker.model import game
from poker.model import player

ACTIONS = ["posts", "bet", "raises", "calls", "checks", "folds"]


def parse_game(game_data):
    """Parse a list of lines into a Game object."""

    logging.debug("Parsing Game")
    lines = game_data.split("\n")
    lines = list(reversed(lines))

    logging.debug("Getting hand ranges")
    hand_line_ranges = get_hand_index_ranges(lines)

    logging.debug("Parsing hands")
    hands = [parse_hand(get_hand(r, lines)) for r in hand_line_ranges]

    logging.debug("Parsing Game")
    return game.Game(hands=hands)


def get_hand_index_ranges(lines):
    """Return a list of hand start and end indicies"""

    hand_start_indices = []
    for i, line in enumerate(lines):
        if "-- starting hand #" in line:
            hand_start_indices.append(i)

    hand_end_indices = []
    for i, line in enumerate(lines):
        if "-- ending hand #" in line:
            hand_end_indices.append(i)

    return list(zip(hand_start_indices, hand_end_indices))


def get_hand(indices, game):
    hand_start_index, hand_end_index = indices
    return game[hand_start_index : hand_end_index + 1]


def parse_hand(hand_lines):

    i = 0
    while "Player stacks" not in hand_lines[i]:
        i += 1

    players = parse_players(hand_lines[i])
    i += 1

    our_cards = [
        c.strip()
        for c in sorted(
            hand_lines[i].split('"')[1].replace("Your hand is ", "").split(",")
        )
    ]
    i += 1

    preflop, i = parse_street(hand_lines, i, "Flop")

    if "Flop" in hand_lines[i]:
        flop = parse_cards(hand_lines[i])
        i += 1
    else:
        return hand.Hand(
            players=players,
            our_cards=our_cards,
            preflop=preflop,
            flop=None,
            first=None,
            turn=None,
            second=None,
            river=None,
            third=None,
        )

    first, i = parse_street(hand_lines, i, "Turn")

    if "Turn" in hand_lines[i]:
        turn = parse_cards(hand_lines[i])
        i += 1
    else:
        return hand.Hand(
            players=players,
            our_cards=our_cards,
            preflop=preflop,
            flop=flop,
            first=first,
            turn=None,
            second=None,
            river=None,
            third=None,
        )

    second, i = parse_street(hand_lines, i, "River")

    if "River" in hand_lines[i]:
        river = parse_cards(hand_lines[i])
        i += 1
    else:
        return hand.Hand(
            players=players,
            our_cards=our_cards,
            preflop=preflop,
            flop=flop,
            first=first,
            turn=turn,
            second=second,
            river=None,
            third=None,
        )

    third, i = parse_street(hand_lines, i, "-- ending hand")
    return hand.Hand(
        players=players,
        our_cards=our_cards,
        preflop=preflop,
        flop=flop,
        first=first,
        turn=turn,
        second=second,
        river=river,
        third=third,
    )


def parse_cards(line):

    flop_cards = line[line.find("[") + 1 : line.rfind("]")]
    return flop_cards.split(",")


PLAYER_REGEX = re.compile(
    r'#([1-9][0-9]*) ""([-_a-zA-Z0-9]+) @ ([-_0-9a-zA-Z_]{10})"" \(([1-9][0-9]*)\)'
)


def parse_players(line):
    players, _, _ = line.split(",")
    players = players[1:-1].replace("Player stacks: ", "")
    players = players.split("|")
    players = [player.strip() for player in players]

    player_objs = []
    for player_string in players:
        match = PLAYER_REGEX.search(player_string)
        if match is None:
            raise ValueError(f"Error parsing player string: {player_string}")

        player_objs.append(player.Player(name=match.group(2), id_=match.group(3)))

    return set(player_objs)


def parse_street(hand, i, term_keyword):

    actions = []

    while True:
        line = hand[i]
        if "-- ending hand" in line or term_keyword in line:
            break

        if is_action(line):
            action = parse_action(line)
            if action is None:
                print("error", i)

            actions.append(action)

        i += 1

    return street.Street(actions), i


def parse_action(line):
    try:

        action_string, _, _ = line.split(",")
        _, player, action = action_string[1:-1].split('""')

        if "posts" in line:
            amount = action.split(" ")[-1]
            return actions.Post(player=player, amount=amount)

        if "bet" in line:
            amount = action.split(" ")[-1]
            return actions.Bet(player=player, amount=amount)

        if "raises" in line:
            amount = action.split(" ")[-1]
            return actions.Raise(player=player, amount=amount)

        if "calls" in line:
            amount = action.split(" ")[-1]
            return actions.Call(player=player, amount=amount)

        if "checks" in line:
            return actions.Check(player=player)

        if "folds" in line:
            return actions.Fold(player=player)

        raise ValueError(f"Line: `{line}` does not a valid action keyword")

    except Exception as err:
        raise ValueError(f"Error {err} parsing line as action: {line}")


def is_action(line):
    for action_keyword in ACTIONS:
        if action_keyword in line:
            return True
    return False
